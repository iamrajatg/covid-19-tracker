{"version":3,"sources":["components/Header.js","components/InfoCard.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["Header","countries","country","change","className","FormControl","Select","variant","value","onChange","e","MenuItem","key","map","name","code","InfoCard","title","cases","total","active","onClick","useState","showCountup","setShowCountup","useEffect","setTimeout","Card","CardContent","Typography","color","end","duration","numeral","format","toUpperCase","casesTypeColors","hex","multiplier","recovered","deaths","popUp","style","backgroundImage","countryInfo","flag","Map","center","zoom","casesType","selectedCountry","TileLayer","url","attribution","data","selectedCountryCode","iso2","Popup","position","lat","long","Circle","fillOpacity","fillColor","radius","Math","sqrt","showDataOnMap","Table","tableData","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","lastdays","chartData","setChartData","a","fetch","res","json","chartPoints","date","previousDate","push","x","y","timeline","getHistoryData","length","datasets","backgroundColor","borderColor","useStyles","makeStyles","root","width","marginTop","marginLeft","marginRight","textStyles","fontSize","fontWeight","valuetext","LastDaysSlider","lastDaysForHistory","classes","sliderValue","setSliderValue","id","gutterBottom","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","App","countriesData","setCountriesData","mapCountries","setMapCountries","selectCountry","stats","setStats","setTableData","lng","mapCenter","setMapCenter","setCasesType","mapZoom","setMapZoom","setLastDaysForHistory","getStats","console","log","countriesInfo","validData","forEach","sort","b","getCountries","find","target","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUAuBeA,MApBf,YAAiD,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAClC,OACI,yBAAKC,UAAU,UACX,gDACA,kBAACC,EAAA,EAAD,CAAaD,UAAU,oBACnB,kBAACE,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAON,EAASO,SAAU,SAACC,GAAD,OAAOP,EAAOO,KAC/D,kBAACC,EAAA,EAAD,CAAUC,IAAI,YAAYJ,MAAM,OAAhC,aAGCP,EAAUY,KAAI,SAACX,GAAD,OACX,kBAACS,EAAA,EAAD,CAAUC,IAAKV,EAAQY,KAAOZ,EAAQa,KAAMP,MAAON,EAAQa,MACtDb,EAAQY,a,sEC2BtBE,MAnCf,YAA6D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAAW,EAClBC,oBAAS,GADS,mBACjDC,EADiD,KACpCC,EADoC,KAUxD,OARAC,qBAAU,WACDF,GAAaC,GAAe,GAC7BN,GACAQ,YAAW,WACPF,GAAe,KAChB,OACR,CAACN,IAGA,kBAACS,EAAA,EAAD,CACIvB,UAAS,mBAAcgB,GAAU,mBAAxB,YACK,cAAVH,GAAyB,SAE7BI,QAASA,GACT,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYzB,UAAU,kBAAkB0B,MAAM,iBACzCb,GAGL,wBAAIb,UAAU,mBACTc,GAAS,GAAK,IACdA,GAASK,GAAe,kBAAC,IAAD,CAASQ,IAAKb,EAAOc,SAAU,KACtDT,GAAeU,IAAQf,GAAOgB,OAAO,MAAMC,eAGjD,kBAACN,EAAA,EAAD,CAAYzB,UAAU,kBAAkB0B,MAAM,WACzCG,IAAQd,GAAOe,OAAO,MAAMC,cADjC,a,oCC7BVC,EAAkB,CACpBlB,MAAO,CACHmB,IAAK,UACLC,WAAY,KAEhBC,UAAW,CACPF,IAAK,UACLC,WAAY,MAEhBE,OAAQ,CACJH,IAAK,UACLC,WAAY,MAIdG,EAAQ,SAACvC,GAAD,OACV,yBAAKE,UAAU,kBACX,yBACIA,UAAU,YACVsC,MAAO,CACHC,gBAAgB,OAAD,OAASzC,EAAQ0C,YAAYC,KAA7B,QAGvB,yBAAKzC,UAAU,gBAAgBF,EAAQA,SACvC,yBAAKE,UAAU,cAAf,UAAoC6B,IAAQ/B,EAAQgB,OAAOgB,OAAO,QAClE,yBAAK9B,UAAU,kBAAf,cACgB6B,IAAQ/B,EAAQqC,WAAWL,OAAO,QAElD,yBAAK9B,UAAU,eAAf,WAAsC6B,IAAQ/B,EAAQsC,QAAQN,OAAO,U,OCb9DY,MAdf,YAAuE,IAAxD7C,EAAuD,EAAvDA,UAAW8C,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,gBAC/C,OACI,yBAAK9C,UAAU,OACX,kBAAC,IAAD,CAAY2C,OAAQA,EAAQC,KAAMA,GAC9B,kBAACG,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2ED0BH,SAACC,GAAD,IAAOL,EAAP,uDAAmB,QAASM,EAA5B,8CACzBD,EAAKzC,KAAI,SAACX,GACN,OACI,kBAAC,WAAD,CAAUU,IAAKV,EAAQ0C,YAAYY,MAC9BtD,EAAQ0C,YAAYY,OAASD,GAC1B,kBAACE,EAAA,EAAD,CAAOC,SAAU,CAACxD,EAAQ0C,YAAYe,IAAKzD,EAAQ0C,YAAYgB,OAC1DnB,EAAMvC,IAGf,kBAAC2D,EAAA,EAAD,CACId,OAAQ,CAAC7C,EAAQ0C,YAAYe,IAAKzD,EAAQ0C,YAAYgB,MACtDE,YAAa,GACbhC,MAAOM,EAAgBa,GAAWZ,IAClC0B,UAAW3B,EAAgBa,GAAWZ,IACtC2B,OACIC,KAAKC,KAAKhE,EAAQ+C,IAClBb,EAAgBa,GAAWX,YAE/B,kBAACmB,EAAA,EAAD,KAAQhB,EAAMvC,SC1CjBiE,CAAclE,EAAWgD,EAAWC,MCetCkB,MAzBf,YAA+B,IAAdC,EAAa,EAAbA,UACb,OACI,yBAAKjE,UAAU,SACX,+BACI,+BACI,4BACI,uCACA,uCAGR,+BACKiE,EAAUxD,KAAI,SAACyC,GAAD,OACX,wBAAI1C,IAAK0C,EAAKV,YAAYY,MACtB,4BAAKF,EAAKpD,SAEV,4BACI,gCAAS+B,IAAQqB,EAAKpC,OAAOgB,OAAO,iB,QCf9DoC,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,OAAQ,CACJV,OAAQ,IAGhBW,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAa3B,GAC1B,OAAOrB,IAAQgD,EAAYzE,OAAO0B,OAAO,WAIrDgD,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACNC,KAAM,CACFnD,OAAQ,WACRoD,cAAe,QAI3BC,MAAO,CACH,CACIC,UAAW,CACPhB,SAAS,GAEbiB,MAAO,CACHC,SAAU,SAAUlF,EAAOmF,EAAOC,GAC9B,OAAO3D,IAAQzB,GAAO0B,OAAO,YA8EtC2D,MAtEf,YAA8D,IAAzC5C,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,gBAAiB4C,EAAY,EAAZA,SAAY,EACvBxE,mBAAS,IADc,mBAClDyE,EADkD,KACvCC,EADuC,KA0CzD,OAvCAvE,qBAAU,YACc,uCAAG,sCAAAwE,EAAA,sEACDC,MAAM,6CAAD,OAC0BhD,EAD1B,qBACsD4C,IAF1D,cACbK,EADa,gBAIAA,EAAIC,OAJJ,OAQnB,GAJM9C,EAJa,OAKf+C,EAAc,GAGM,QAApBnD,GACA,GAAII,EAAKpC,MACL,IAASoF,KAAQhD,EAAKL,GACdsD,GACAF,EAAYG,KAAK,CACbC,EAAGH,EACHI,EAAGpD,EAAKL,GAAWqD,GAAQhD,EAAKL,GAAWsD,KAGnDA,EAAeD,OAGvB,GAAIhD,EAAKqD,SACL,IAASL,KAAQhD,EAAKqD,SAAS1D,GACvBsD,GACAF,EAAYG,KAAK,CACbC,EAAGH,EACHI,EACIpD,EAAKqD,SAAS1D,GAAWqD,GACzBhD,EAAKqD,SAAS1D,GAAWsD,KAGrCA,EAAeD,EAI3BN,EAAaK,GAlCM,2CAAH,qDAoCpBO,KACD,CAAC3D,EAAWC,EAAiB4C,IAE5B,yBAAK1F,UAAU,aACV2F,EAAUc,OAAS,EAChB,kBAAC,OAAD,CACIvC,QAASA,EACThB,KAAM,CACFwD,SAAU,CACN,CACIC,gBACkB,cAAd9D,EACM,oBACA,sBACV+D,YACkB,cAAd/D,EACM,oBACA,UACVK,KAAMyC,OAMtB,e,2BC3GVkB,EAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,IACPC,UAAW,MACXC,WAAY,OACZC,YAAa,QAEjBC,WAAY,CACRC,SAAU,OACVC,WAAY,UAIpB,SAASC,EAAUnH,GACf,MAAM,GAAN,OAAUA,EAAV,QAGW,SAASoH,EAAT,GAA2D,IAAjCnH,EAAgC,EAAhCA,SAAUoH,EAAsB,EAAtBA,mBACzCC,EAAUb,IADqD,EAG/B3F,mBAAS,KAHsB,mBAG9DyG,EAH8D,KAGjDC,EAHiD,KAKrE,OACI,yBAAK5H,UAAW0H,EAAQX,MACpB,kBAACtF,EAAA,EAAD,CACIzB,UAAW0H,EAAQN,WACnBS,GAAG,SACHC,cAAY,EACZpG,MAAM,WAJV,wBAK0BiG,EAL1B,SAOA,kBAACI,EAAA,EAAD,CACI1H,SAAU,SAACC,EAAGF,GACVC,EAASD,GACTwH,EAAexH,IAEnBA,MAAOqH,EACPO,aAAc,IACdC,iBAAkBV,EAClBW,kBAAgB,SAChBC,kBAAkB,OAClBC,KAAM,GACNC,OAAK,EACLC,IAAK,GACLC,IAAK,OCkHNC,MAxJf,WAAgB,IAAD,EAC+BtH,mBAAS,IADxC,mBACJuH,EADI,KACWC,EADX,OAE6BxH,mBAAS,IAFtC,mBAEJyH,EAFI,KAEUC,EAFV,OAG8B1H,mBAAS,OAHvC,mBAGJ4B,EAHI,KAGa+F,EAHb,OAIe3H,mBAAS,IAJxB,mBAIJ4H,EAJI,KAIGC,EAJH,OAKuB7H,mBAAS,IALhC,mBAKJ+C,EALI,KAKO+E,EALP,OAMuB9H,mBAAS,CACvCqC,IAAK,SACL0F,KAAM,UARC,mBAMJC,EANI,KAMOC,EANP,OAUuBjI,mBAAS,SAVhC,mBAUJ2B,EAVI,KAUOuG,EAVP,OAYmBlI,mBAAS,GAZ5B,mBAYJmI,EAZI,KAYKC,EAZL,OAayCpI,mBAAS,KAblD,mBAaJuG,EAbI,KAagB8B,EAbhB,cAeIC,EAfJ,8EAeX,WAAwB1J,GAAxB,mBAAA+F,EAAA,6DACQ7C,EADR,yCAEoB,QAAZlD,EAAoBA,EAApB,oBAA2CA,IAFnD,kBAM0BgG,MAAM9C,GANhC,cAMc+C,EANd,gBAO2BA,EAAIC,OAP/B,OAOc9C,EAPd,OASQ6F,EAAS7F,GAEO,QAAZpD,GACAqJ,EAAa,CACT5F,IAAK,SACL0F,KAAM,UAEM,IAAZI,GACA/H,YAAW,WACPgI,EAAW,KACZ,OAEPH,EAAa,CAAE5F,IAAKL,EAAKV,YAAYe,IAAK0F,IAAK/F,EAAKV,YAAYgB,OAEhD,IAAZ6F,GACA/H,YAAW,WACPgI,EAAW,KACZ,MA1BnB,kDA6BQG,QAAQC,IAAR,MA7BR,2DAfW,sBAgDXrI,qBAAU,WAAM,4CACZ,kCAAAwE,EAAA,+EAE0BC,MAAM,4CAFhC,cAEcC,EAFd,gBAG2BA,EAAIC,OAH/B,OAGc9C,EAHd,OAIQwF,EAAiBxF,GACbyG,EAAgB,GAChBC,EAAY,GAChB1G,EAAK2G,SAAQ,SAAC/J,GAENA,EAAQA,SACRA,EAAQ0C,aACR1C,EAAQ0C,YAAYY,OAEpBuG,EAAcvD,KAAK,CACf1F,KAAMZ,EAAQA,QACda,KAAMb,EAAQ0C,YAAYY,OAE9BwG,EAAUxD,KAAKtG,OAIvB8J,EAAYA,EAAUE,MAAK,SAACjE,EAAGkE,GAAJ,OAAUA,EAAEjJ,MAAQ+E,EAAE/E,SACjDkI,EAAaY,GACblB,EAAiBiB,GAEjBf,EAAgBgB,GAChBJ,EAAS,OA1BjB,kDA4BQC,QAAQC,IAAR,MA5BR,2DADY,uBAAC,WAAD,wBAiCZM,KACD,IAGH,IAIMlK,EAAU2I,EAAcwB,MAAK,SAACnK,GAAD,OAAaA,EAAQa,OAASmC,KACjE,OACI,yBAAK9C,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,CACIH,UAAW4I,EACX3I,QAASgD,EACT/C,OAXQ,SAACO,GACrBuI,EAAcvI,EAAE4J,OAAO9J,OACvBoJ,EAASlJ,EAAE4J,OAAO9J,UAWV,yBAAKJ,UAAU,kBACX,kBAAC,EAAD,CACIgB,OAAsB,UAAd6B,EACR5B,QAAS,SAACX,GAAD,OAAO8I,EAAa,UAC7BvI,MAAM,oBACNC,MAAOgI,EAAMqB,WACbpJ,MAAO+H,EAAMhI,QAEjB,kBAAC,EAAD,CACIE,OAAsB,cAAd6B,EACR5B,QAAS,SAACX,GAAD,OAAO8I,EAAa,cAC7BvI,MAAM,YACNC,MAAOgI,EAAMsB,eACbrJ,MAAO+H,EAAM3G,YAEjB,kBAAC,EAAD,CACInB,OAAsB,WAAd6B,EACR5B,QAAS,SAACX,GAAD,OAAO8I,EAAa,WAC7BvI,MAAM,SACNC,MAAOgI,EAAMuB,YACbtJ,MAAO+H,EAAM1G,UAGrB,kBAAC,EAAD,CACIvC,UAAW8I,EACXhG,OAAQuG,EACRtG,KAAMyG,EACNvG,gBAAiBA,EACjBD,UAAWA,KAGnB,kBAACtB,EAAA,EAAD,CAAMvB,UAAU,YACZ,kBAACwB,EAAA,EAAD,KACI,qDACA,kBAAC,EAAD,CAAOyC,UAAWA,IAClB,wBAAI3B,MAAO,CAAE2E,UAAW,SACC,QAApBnE,EACK,aACAhD,GAAWA,EAAQY,KAAO,IAHpC,OAISmC,GAGT,kBAAC,EAAD,CACIA,UAAWA,EACX6C,SAAU+B,EACV3E,gBAAiBA,IAErB,kBAAC,EAAD,CAAQ1C,MAAOqH,EAAoBpH,SAAUkJ,QChJ7Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.197e92b9.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Select, FormControl, MenuItem } from \"@material-ui/core\"\r\n\r\nfunction Header({ countries, country, change }) {\r\n    return (\r\n        <div className=\"header\">\r\n            <h2>COVID-19 TRACKER</h2>\r\n            <FormControl className=\"header__dropdown\">\r\n                <Select variant=\"outlined\" value={country} onChange={(e) => change(e)}>\r\n                    <MenuItem key=\"worldwide\" value=\"all\">\r\n                        WORLDWIDE\r\n                    </MenuItem>\r\n                    {countries.map((country) => (\r\n                        <MenuItem key={country.name + country.code} value={country.code}>\r\n                            {country.name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\nimport \"./InfoCard.css\"\r\nimport numeral from \"numeral\"\r\nimport Countup from \"react-countup\"\r\n\r\nfunction InfoCard({ title, cases, total, active, onClick }) {\r\n    const [showCountup, setShowCountup] = useState(true)\r\n    useEffect(() => {\r\n        if (!showCountup) setShowCountup(true)\r\n        if (cases)\r\n            setTimeout(() => {\r\n                setShowCountup(false)\r\n            }, 3000)\r\n    }, [cases])\r\n\r\n    return (\r\n        <Card\r\n            className={`infoCard ${active && \"infoCard--active\"} ${\r\n                title === \"Recovered\" && \"green\"\r\n            }`}\r\n            onClick={onClick}>\r\n            <CardContent>\r\n                <Typography className=\"infoCard__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className=\"infoCard__cases\">\r\n                    {cases >= 0 && \"+\"}\r\n                    {cases && showCountup && <Countup end={cases} duration={2} />}\r\n                    {!showCountup && numeral(cases).format(\"0a\").toUpperCase()}\r\n                </h2>\r\n\r\n                <Typography className=\"infoCard__total\" color=\"primary\">\r\n                    {numeral(total).format(\"0a\").toUpperCase()} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoCard\r\n","import React, { Fragment } from \"react\"\r\nimport numeral from \"numeral\"\r\nimport { Circle, Popup } from \"react-leaflet\"\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n}\r\n\r\nconst popUp = (country) => (\r\n    <div className=\"info-container\">\r\n        <div\r\n            className=\"info-flag\"\r\n            style={{\r\n                backgroundImage: `url(${country.countryInfo.flag})`,\r\n            }}\r\n        />\r\n        <div className=\"info-country\">{country.country}</div>\r\n        <div className=\"info-cases\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n        <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n    </div>\r\n)\r\n\r\n//Draw circles on map with tooltips\r\nexport const showDataOnMap = (data, casesType = \"cases\", selectedCountryCode) =>\r\n    data.map((country) => {\r\n        return (\r\n            <Fragment key={country.countryInfo.iso2}>\r\n                {country.countryInfo.iso2 === selectedCountryCode && (\r\n                    <Popup position={[country.countryInfo.lat, country.countryInfo.long]}>\r\n                        {popUp(country)}\r\n                    </Popup>\r\n                )}\r\n                <Circle\r\n                    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                    fillOpacity={0.4}\r\n                    color={casesTypeColors[casesType].hex}\r\n                    fillColor={casesTypeColors[casesType].hex}\r\n                    radius={\r\n                        Math.sqrt(country[casesType]) *\r\n                        casesTypeColors[casesType].multiplier\r\n                    }>\r\n                    <Popup>{popUp(country)}</Popup>\r\n                </Circle>\r\n            </Fragment>\r\n        )\r\n    })\r\n","import React from \"react\"\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\"\r\nimport { showDataOnMap } from \"../util\"\r\nimport \"./Map.css\"\r\n\r\nfunction Map({ countries, center, zoom, casesType, selectedCountry }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType, selectedCountry)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from \"react\"\r\nimport numeral from \"numeral\"\r\n\r\nfunction Table({ tableData }) {\r\n    return (\r\n        <div className=\"table\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>COUNTRY</th>\r\n                        <th>CASES</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableData.map((data) => (\r\n                        <tr key={data.countryInfo.iso2}>\r\n                            <td>{data.country}</td>\r\n\r\n                            <td>\r\n                                <strong>{numeral(data.cases).format(\"0,0\")}</strong>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\nexport default Table\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport numeral from \"numeral\"\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        points: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\")\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nfunction LineGraph({ casesType, selectedCountry, lastdays }) {\r\n    const [chartData, setChartData] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getHistoryData = async () => {\r\n            const res = await fetch(\r\n                `https://disease.sh/v3/covid-19/historical/${selectedCountry}?lastdays=${lastdays}`\r\n            )\r\n            const data = await res.json()\r\n            let chartPoints = []\r\n            let previousDate\r\n\r\n            if (selectedCountry === \"all\") {\r\n                if (data.cases)\r\n                    for (let date in data[casesType]) {\r\n                        if (previousDate)\r\n                            chartPoints.push({\r\n                                x: date,\r\n                                y: data[casesType][date] - data[casesType][previousDate],\r\n                            })\r\n\r\n                        previousDate = date\r\n                    }\r\n            } else {\r\n                if (data.timeline)\r\n                    for (let date in data.timeline[casesType]) {\r\n                        if (previousDate)\r\n                            chartPoints.push({\r\n                                x: date,\r\n                                y:\r\n                                    data.timeline[casesType][date] -\r\n                                    data.timeline[casesType][previousDate],\r\n                            })\r\n\r\n                        previousDate = date\r\n                    }\r\n            }\r\n\r\n            setChartData(chartPoints)\r\n        }\r\n        getHistoryData()\r\n    }, [casesType, selectedCountry, lastdays])\r\n    return (\r\n        <div className=\"linegraph\">\r\n            {chartData.length > 0 ? (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor:\r\n                                    casesType === \"recovered\"\r\n                                        ? \"rgba(0,255,0,0.5)\"\r\n                                        : \"rgba(204,16,52,0.6)\",\r\n                                borderColor:\r\n                                    casesType === \"recovered\"\r\n                                        ? \"rgba(0,255,0,0.7)\"\r\n                                        : \"#CC1034\",\r\n                                data: chartData,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n            ) : (\r\n                \"Loading...\"\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState } from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Slider from \"@material-ui/core/Slider\"\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 300,\r\n        marginTop: \"5px\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    },\r\n    textStyles: {\r\n        fontSize: \"1rem\",\r\n        fontWeight: \"bold\",\r\n    },\r\n})\r\n\r\nfunction valuetext(value) {\r\n    return `${value}days`\r\n}\r\n\r\nexport default function LastDaysSlider({ onChange, lastDaysForHistory }) {\r\n    const classes = useStyles()\r\n\r\n    const [sliderValue, setSliderValue] = useState(120)\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography\r\n                className={classes.textStyles}\r\n                id=\"slider\"\r\n                gutterBottom\r\n                color=\"primary\">\r\n                History Range - Last {sliderValue} days\r\n            </Typography>\r\n            <Slider\r\n                onChange={(e, value) => {\r\n                    onChange(value)\r\n                    setSliderValue(value)\r\n                }}\r\n                value={lastDaysForHistory}\r\n                defaultValue={120}\r\n                getAriaValueText={valuetext}\r\n                aria-labelledby=\"slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                step={10}\r\n                marks\r\n                min={10}\r\n                max={120}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\"\nimport \"./App.css\"\nimport Header from \"./components/Header\"\nimport InfoCard from \"./components/InfoCard\"\nimport Map from \"./components/Map\"\nimport { Card, CardContent } from \"@material-ui/core\"\nimport Table from \"./components/Table\"\nimport LineGraph from \"./components/LineGraph\"\nimport \"leaflet/dist/leaflet.css\"\nimport Slider from \"./components/Slider\"\n\nfunction App() {\n    const [countriesData, setCountriesData] = useState([])\n    const [mapCountries, setMapCountries] = useState([])\n    const [selectedCountry, selectCountry] = useState(\"all\")\n    const [stats, setStats] = useState({})\n    const [tableData, setTableData] = useState([])\n    const [mapCenter, setMapCenter] = useState({\n        lat: 34.80746,\n        lng: -40.4796,\n    })\n    const [casesType, setCasesType] = useState(\"cases\")\n\n    const [mapZoom, setMapZoom] = useState(3)\n    const [lastDaysForHistory, setLastDaysForHistory] = useState(120)\n\n    async function getStats(country) {\n        let url = `https://disease.sh/v3/covid-19/${\n            country === \"all\" ? country : `countries/${country}`\n        }`\n\n        try {\n            const res = await fetch(url)\n            const data = await res.json()\n\n            setStats(data)\n            //console.log({ lat: data.countryInfo.lat, lng: data.countryInfo.long })\n            if (country === \"all\") {\n                setMapCenter({\n                    lat: 34.80746,\n                    lng: -40.4796,\n                })\n                if (mapZoom !== 3)\n                    setTimeout(() => {\n                        setMapZoom(3)\n                    }, 500)\n            } else {\n                setMapCenter({ lat: data.countryInfo.lat, lng: data.countryInfo.long })\n\n                if (mapZoom !== 4)\n                    setTimeout(() => {\n                        setMapZoom(4)\n                    }, 500)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        async function getCountries() {\n            try {\n                const res = await fetch(\"https://disease.sh/v3/covid-19/countries\")\n                const data = await res.json()\n                setCountriesData(data)\n                let countriesInfo = []\n                let validData = []\n                data.forEach((country) => {\n                    if (\n                        country.country &&\n                        country.countryInfo &&\n                        country.countryInfo.iso2\n                    ) {\n                        countriesInfo.push({\n                            name: country.country,\n                            code: country.countryInfo.iso2,\n                        })\n                        validData.push(country)\n                    }\n                })\n                //Sorting data by no, of total cases to send to table\n                validData = validData.sort((a, b) => b.cases - a.cases)\n                setTableData(validData)\n                setCountriesData(countriesInfo)\n                // console.log(data)\n                setMapCountries(validData)\n                getStats(\"all\")\n            } catch (error) {\n                console.log(error)\n            }\n        }\n\n        getCountries()\n    }, [])\n\n    //Change Handler for SelectBox Country Selection\n    const onSelectCountry = (e) => {\n        selectCountry(e.target.value)\n        getStats(e.target.value)\n    }\n    const country = countriesData.find((country) => country.code === selectedCountry)\n    return (\n        <div className=\"app\">\n            <div className=\"app_main\">\n                <Header\n                    countries={countriesData}\n                    country={selectedCountry}\n                    change={onSelectCountry}\n                />\n                <div className=\"card_container\">\n                    <InfoCard\n                        active={casesType === \"cases\"}\n                        onClick={(e) => setCasesType(\"cases\")}\n                        title=\"Coronavirus Cases\"\n                        cases={stats.todayCases}\n                        total={stats.cases}\n                    />\n                    <InfoCard\n                        active={casesType === \"recovered\"}\n                        onClick={(e) => setCasesType(\"recovered\")}\n                        title=\"Recovered\"\n                        cases={stats.todayRecovered}\n                        total={stats.recovered}\n                    />\n                    <InfoCard\n                        active={casesType === \"deaths\"}\n                        onClick={(e) => setCasesType(\"deaths\")}\n                        title=\"Deaths\"\n                        cases={stats.todayDeaths}\n                        total={stats.deaths}\n                    />\n                </div>\n                <Map\n                    countries={mapCountries}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                    selectedCountry={selectedCountry}\n                    casesType={casesType}\n                />\n            </div>\n            <Card className=\"app_side\">\n                <CardContent>\n                    <h3>Live Cases By Country</h3>\n                    <Table tableData={tableData} />\n                    <h3 style={{ marginTop: \"20px\" }}>\n                        {selectedCountry === \"all\"\n                            ? \"Worldwide \"\n                            : country && country.name + \" \"}\n                        new {casesType}\n                    </h3>\n\n                    <LineGraph\n                        casesType={casesType}\n                        lastdays={lastDaysForHistory}\n                        selectedCountry={selectedCountry}\n                    />\n                    <Slider value={lastDaysForHistory} onChange={setLastDaysForHistory} />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}